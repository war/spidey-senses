name: Reusable API Test

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: "Name of the API service"
      test-project-path:
        required: true
        type: string
        description: "Path to the test project"
      dotnet-version:
        required: false
        type: string
        default: "9.0.x"
        description: "Version of .NET to use"
    outputs:
      test-success:
        description: "Indicates if the tests were successful"
        value: ${{ jobs.test.outputs.success }}
      coverage-file:
        description: "Path to the generated coverage file"
        value: ${{ jobs.test.outputs.coverage-file }}

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.status.outputs.success }}
      coverage-file: ${{ steps.coverage.outputs.file }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          dotnet-quality: 'ga'
      
      - name: Restore dependencies
        run: dotnet restore ${{ inputs.test-project-path }}
      
      - name: Test with coverage
        run: dotnet test ${{ inputs.test-project-path }} --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
      - name: Find coverage file
        id: coverage
        run: |
          COVERAGE_FILE=$(find ./coverage -name "coverage.cobertura.xml" | head -1)
          echo "file=$COVERAGE_FILE" >> $GITHUB_OUTPUT
          
      - name: Install ReportGenerator tool
        run: dotnet tool install -g dotnet-reportgenerator-globaltool 
      
      - name: Generate coverage report
        run: |
          reportgenerator \
            "-reports:${{ steps.coverage.outputs.file }}" \
            "-targetdir:./coverage-report/${{ inputs.service-name }}" \
            "-reporttypes:Html,Markdown" \
            "-license:${{ secrets.REPORTGENERATOR_LICENSE }}"
      
      - name: Set output status
        id: status
        run: echo "success=true" >> $GITHUB_OUTPUT
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service-name }}-coverage
          path: ./coverage-report/${{ inputs.service-name }}
          retention-days: 1
