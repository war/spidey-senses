name: Reusable DotNet Test

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: "Name of the API service"
      test-project-path:
        required: true
        type: string
        description: "Path to the test project"
      dotnet-version:
        required: false
        type: string
        default: "9.0.x"
        description: "Version of .NET to use"
      generate-individual-report:
        required: false
        type: boolean
        default: true
        description: "Whether to generate an individual coverage report"
    outputs:
      test-success:
        description: "Indicates if the tests were successful"
        value: ${{ jobs.test.outputs.success }}
      coverage-file:
        description: "Path to the generated coverage file"
        value: ${{ jobs.test.outputs.coverage-file }}
      coverage-percentage:
        description: "Code coverage percentage for this service"
        value: ${{ jobs.test.outputs.coverage-percentage }}

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.status.outputs.success }}
      coverage-file: ${{ steps.coverage.outputs.file }}
      coverage-percentage: ${{ steps.extract-coverage.outputs.percentage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          dotnet-quality: 'ga'
      
      - name: Restore dependencies
        run: dotnet restore ${{ inputs.test-project-path }}
      
      - name: Test with coverage
        run: dotnet test ${{ inputs.test-project-path }} --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
      - name: Find coverage file
        id: coverage
        run: |
          COVERAGE_FILE=$(find ./coverage -name "coverage.cobertura.xml" | head -1)
          if [ -z "$COVERAGE_FILE" ]; then
            echo "No coverage file found!"
            exit 1
          fi
          echo "file=$COVERAGE_FILE" >> $GITHUB_OUTPUT
      
      - name: Generate individual coverage report
        if: inputs.generate-individual-report
        run: |
          # Install ReportGenerator if not already installed
          if ! command -v reportgenerator &> /dev/null; then
            dotnet tool install -g dotnet-reportgenerator-globaltool
          fi
          
          echo "Running ReportGenerator with license parameter"
          reportgenerator \
            -reports:"${{ steps.coverage.outputs.file }}" \
            -targetdir:"./coverage-report/${{ inputs.service-name }}" \
            -reporttypes:"Html,MarkdownSummary,JsonSummary" \
            -title:"${{ inputs.service-name }} Coverage Report" \
            -license:"${{ secrets.REPORTGENERATOR_LICENSE }}"
      
      - name: Extract coverage percentage
        id: extract-coverage
        if: inputs.generate-individual-report
        run: |
          if [ -f "./coverage-report/${{ inputs.service-name }}/Summary.json" ]; then
            PERCENTAGE=$(grep -o '"lineCoverage":[0-9.]*' ./coverage-report/${{ inputs.service-name }}/Summary.json | cut -d':' -f2)
            echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Set output status
        id: status
        run: echo "success=true" >> $GITHUB_OUTPUT
      
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service-name }}-coverage-data
          path: ${{ steps.coverage.outputs.file }}
          retention-days: 1
      
      - name: Upload coverage report
        if: inputs.generate-individual-report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service-name }}-coverage-report
          path: ./coverage-report/${{ inputs.service-name }}
          retention-days: 1
